# visualizer.py
import os
from glob import glob
from collections import deque
import streamlit as st
from streamlit.components.v1 import html

# --------------------
# Config (‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
# --------------------
DEFAULT_LOG_DIR   = "logs"     # ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå .log/.txt
ERROR_MAX_BYTES   = 300_000    # ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå ~300KB/‡πÑ‡∏ü‡∏•‡πå
ERROR_SHOW_MAX    = 300        # ‡πÅ‡∏™‡∏î‡∏á error ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô N ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
DEFAULT_REFRESHMS = 3000       # ms

ERROR_PREFIX = "[ERR]"         # ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞ error ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ç‡∏≠

st.set_page_config(page_title="Grid Dashboard + Errors", page_icon="üö®", layout="wide")

# --------------------
# Helpers
# --------------------
def _find_latest_logs(dirpath: str) -> list[str]:
    try:
        files = []
        for patt in ("*.log", "*.txt"):
            files.extend(glob(os.path.join(dirpath, patt)))
        files = [p for p in files if os.path.isfile(p)]
        files.sort(key=lambda p: os.path.getmtime(p), reverse=True)
        return files[:5]  # ‡∏û‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    except Exception:
        return []

def _tail_text(path: str, max_bytes: int = ERROR_MAX_BYTES) -> str:
    try:
        with open(path, "rb") as f:
            f.seek(0, os.SEEK_END)
            size = f.tell()
            f.seek(max(0, size - max_bytes), os.SEEK_SET)
            chunk = f.read()
        return chunk.decode("utf-8", errors="ignore")
    except Exception:
        return ""

def _extract_errors(text: str) -> list[str]:
    out = []
    for ln in text.splitlines():
        s = ln.strip()
        if s.startswith(ERROR_PREFIX):
            out.append(s)
    return out

def _collect_errors(log_dir: str) -> list[str]:
    errors: list[str] = []
    for p in _find_latest_logs(log_dir):
        txt = _tail_text(p, ERROR_MAX_BYTES)
        if not txt:
            continue
        errors.extend(_extract_errors(txt))
    # dedupe ‡πÅ‡∏ö‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏•‡∏≥‡∏î‡∏±‡∏ö
    seen = set()
    dq = deque(maxlen=ERROR_SHOW_MAX)
    for ln in errors:
        if ln in seen:
            continue
        seen.add(ln)
        dq.append(ln)
    return list(dq)[-ERROR_SHOW_MAX:]

# Cache ‡∏ö‡∏≤‡∏á ‡πÜ ‡∏•‡∏î IO (TTL 2s)
@st.cache_data(ttl=2)
def get_errors_cached(log_dir: str) -> list[str]:
    return _collect_errors(log_dir)

# --------------------
# Sidebar controls (‡πÄ‡∏ö‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)
# --------------------
with st.sidebar:
    st.header("‚öôÔ∏è Settings")
    log_dir = st.text_input("Log folder", DEFAULT_LOG_DIR)
    refresh_ms = st.slider("Auto-refresh (ms)", 1000, 10000, DEFAULT_REFRESHMS, 500)

# --------------------
# (‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≤‡∏ü/‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
# ‡∏ß‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏î‡∏¥‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥...
# --------------------

# --------------------
# Errors panel
# --------------------
st.markdown("### üö® Errors (latest)")
try:
    errs = get_errors_cached(log_dir)
    if errs:
        # ‡πÅ‡∏™‡∏î‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÑ‡∏ß‡πâ‡∏ö‡∏ô
        for ln in errs[::-1]:
            st.code(ln, language=None)
    else:
        st.info(f"‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ [ERR] ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå `{log_dir}/`")
except Exception as e:
    st.warning(f"‡πÅ‡∏™‡∏î‡∏á error ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

# --------------------
# Auto refresh (‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£/‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢)
# --------------------
html(f"""
<script>
setTimeout(function() {{
    window.location.reload();
}}, {int(refresh_ms)});
</script>
""", height=0)
